{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","type","id","onClick","togglemode","htmlFor","TextForm","useState","text","setText","style","color","heading","rows","value","onChange","event","console","log","target","backgroundColor","newtext","toUpperCase","showalert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","length","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setmode","setalert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c010e37a.chunk.js","sourcesContent":["import React from \"react\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <div>\r\n      <nav\r\n        className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n      >\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\" >\r\n            TextUtils\r\n            </a>\r\n          {/* </Link> */}\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                  Home\r\n                  </a>\r\n                {/* </Link> */}\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">\r\n                  About\r\n                </Link>\r\n              </li> */}\r\n            </ul>\r\n            {/* <form className=\"d-flex\">\r\n              <input\r\n                className=\"form-control me-2\"\r\n                type=\"search\"\r\n                placeholder=\"Search\"\r\n                aria-label=\"Search\"\r\n              />\r\n              <button className=\"btn btn-primary\" type=\"submit\">\r\n                Search\r\n              </button>\r\n            </form> */}\r\n            <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n              <input\r\n                className=\"form-check-input\"\r\n                type=\"checkbox\"\r\n                id=\"flexSwitchCheckDefault\"\r\n                onClick={props.togglemode}\r\n              />\r\n              <label className=\"form-check-label \"  htmlFor=\"flexSwitchCheckDefault\">\r\n                Enable Dark Mode\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nexport default function TextForm(props) {\r\n  const handleLowClick = () => {\r\n    console.log(\"Lowercase was clicked\");\r\n    let newtext = text.toLowerCase();\r\n    setText(newtext);\r\n    props.showalert(\"Converted to Lowercase\",\"success\");\r\n  };\r\n  const handleUpClick = () => {\r\n    console.log(\"Uppercase was clicked\");\r\n    let newtext = text.toUpperCase();\r\n    setText(newtext);\r\n    props.showalert(\"Converted to Uppercase\",\"success\");\r\n  };\r\n  const handleonchange = (event) => {\r\n    console.log(\"On change\");\r\n    setText(event.target.value);\r\n  };\r\n  const handlecopy = () => {\r\n    let text = document.getElementById(\"mybox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showalert(\"Text Copied!!!\",\"success\");\r\n  };\r\n  const [text, setText] = useState(\"\");\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"black\" }}\r\n      >\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"mybox\"\r\n            rows=\"8\"\r\n            value={text}\r\n            onChange={handleonchange}\r\n            style={{\r\n              backgroundColor: props.mode === \"dark\" ? \"gray\" : \"white\",\r\n              color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n            }}\r\n          ></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary\" onClick={handleUpClick}>\r\n          Convert to UpperCase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-3\" onClick={handleLowClick}>\r\n          Convert to LowerCase\r\n        </button>\r\n        <button className=\"btn btn-primary\" onClick={handlecopy}>\r\n          Copy Text\r\n        </button>\r\n      </div>\r\n      <div\r\n        className=\"container my-3\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"black\" }}\r\n      >\r\n        <h1>Your text summary</h1>\r\n        <p>\r\n          {text.split(\" \").length} words and {text.length} characters\r\n        </p>\r\n        <p>{0.008 * text.split(\" \").length} minutes read</p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length>0?text:\"Enter some text to preview it\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n    const capitalize=(word)=>{\r\n        const lower=word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n    props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n      <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import \"./App.css\";\n// import About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/Alert\";\n// import About from \"./components/About\";\n// import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setmode] = useState(\"light\");\n  const [alert, setalert] = useState(null);\n\n  const showalert = (message, type) => {\n    setalert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setalert(null);\n    }, 1500);\n  };\n  const togglemode = () => {\n    if (mode === \"light\") {\n      setmode(\"dark\");\n      document.body.style.backgroundColor = \"gray\";\n      showalert(\"Dark Mode has been enabled\", \"success\");\n    } else {\n      setmode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showalert(\"Light Mode has been enabled\", \"success\");\n    }\n  };\n  return (\n    <>\n    {/* <Router> */}\n      <Navbar mode={mode} togglemode={togglemode} />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        {/* <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\"> */}\n            <TextForm\n              showalert={showalert}\n              heading=\"Enter the text to analyze below\"\n              mode={mode}\n           />\n          {/* </Route> */}\n        {/* </Switch> */}\n      </div>\n      {/*  </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}